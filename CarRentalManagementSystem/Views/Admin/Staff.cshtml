@model IEnumerable<CarRentalManagementSystem.DTOs.StaffResponseDTO>
@{
    ViewData["Title"] = "Staff Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}


<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><i class="fas fa-user-tie me-2"></i>Staff Management</h1>
    @if (ViewBag.UserRole == "Admin")
    {
        <button class="btn btn-primary" onclick="addNewStaff()">
            <i class="fas fa-plus me-1"></i>Add New Staff
        </button>
    }
</div>

<div class="row">
    <div class="col-12">
        
        @if (Model.Any())
        {
            <div class="card shadow-sm">
                <div class="card-body p-3">
                    <div class="table-responsive">
                        <table class="table table-hover align-middle table-striped table-sm admin-staff-table" id="staffTable">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col" style="width: 8%; padding: 10px 6px; font-size: 0.8rem;">ID</th>
                                    <th scope="col" style="width: 20%; padding: 10px 6px; font-size: 0.8rem;">Full Name</th>
                                    <th scope="col" style="width: 12%; padding: 10px 6px; font-size: 0.8rem;">Username</th>
                                    <th scope="col" style="width: 22%; padding: 10px 6px; font-size: 0.8rem;">Email</th>
                                    <th scope="col" style="width: 12%; padding: 10px 6px; font-size: 0.8rem;">Phone</th>
                                    <th scope="col" style="width: 8%; padding: 10px 6px; font-size: 0.8rem;">Role</th>
                                    <th scope="col" style="width: 10%; padding: 10px 6px; font-size: 0.8rem;">Joined</th>
                                    <th scope="col" style="width: 8%; padding: 10px 6px; font-size: 0.8rem;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var staff in Model)
                                {
                                    <tr style="vertical-align: middle;">
                                        <td class="text-center"><strong class="text-primary">#@staff.StaffID</strong></td>
                                        <td class="text-center">
                                            <div class="d-flex align-items-center justify-content-center">
                                                @if (!string.IsNullOrEmpty(staff.ImageUrl))
                                                {
                                                    <img src="@staff.ImageUrl" alt="avatar" class="rounded-circle me-2" style="width:28px;height:28px;object-fit:cover; border: 2px solid #e3f2fd;" />
                                                }
                                                else
                                                {
                                                    <div class="bg-gradient-primary rounded-circle me-2 d-flex align-items-center justify-content-center" style="width:28px;height:28px; background: linear-gradient(45deg, #2196F3, #21CBF3);">
                                                        <i class="fas fa-user-tie text-white" style="font-size:12px;"></i>
                                                    </div>
                                                }
                                                <span class="fw-medium">@staff.FullName</span>
                                            </div>
                                        </td>
                                        <td class="text-center"><span class="text-muted">@staff.Username</span></td>
                                        <td class="text-center"><span class="text-info fw-medium">@staff.Email</span></td>
                                        <td class="text-center">
                                            @if (string.IsNullOrEmpty(staff.PhoneNo))
                                            {
                                                <span class="text-muted">Not provided</span>
                                            }
                                            else
                                            {
                                                <span class="fw-medium">@staff.PhoneNo</span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            <span class="badge fs-6 px-3 py-2 @(staff.Role == "Admin" ? "bg-danger" : "bg-success")" style="border-radius: 20px;">
                                                @staff.Role
                                            </span>
                                        </td>
                                        <td class="text-center"><span class="text-secondary">@staff.CreatedAt.ToString("MMM dd, yyyy")</span></td>
                                        <td class="text-center">
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-primary" onclick="editStaff(@staff.StaffID)" style="border-radius: 20px 0 0 20px;">
                                                    <i class="fas fa-edit"></i> Edit
                                                </button>
                                                @if (staff.Role != "Admin" && ViewBag.UserRole == "Admin")
                                                {
                                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteStaff(@staff.StaffID)" style="border-radius: 0 20px 20px 0;">
                                                        <i class="fas fa-trash"></i> Delete
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-user-tie fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">No staff members found</h4>
                <p class="text-muted">No staff members have been added yet.</p>
                @if (ViewBag.UserRole == "Admin")
                {
                    <button class="btn btn-primary" onclick="addNewStaff()">
                        <i class="fas fa-plus me-1"></i>Add First Staff Member
                    </button>
                }
            </div>
        }
    </div>
</div>

<!-- Staff Registration Modal -->
@if (ViewBag.UserRole == "Admin")
{
    <div class="modal fade" id="staffModal" tabindex="-1" aria-labelledby="staffModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staffModalLabel">
                        <i class="fas fa-user-plus me-2"></i>Add New Staff Member
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="staffForm">
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="firstName" class="form-label">
                                        <i class="fas fa-user me-1"></i>First Name *
                                    </label>
                                    <input type="text" class="form-control" id="firstName" name="firstName" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="lastName" class="form-label">
                                        <i class="fas fa-user me-1"></i>Last Name *
                                    </label>
                                    <input type="text" class="form-control" id="lastName" name="lastName" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="email" class="form-label">
                                        <i class="fas fa-envelope me-1"></i>Email Address *
                                    </label>
                                    <input type="email" class="form-control" id="email" name="email" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="phoneNumber" class="form-label">
                                        <i class="fas fa-phone me-1"></i>Phone Number *
                                    </label>
                                    <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="username" class="form-label">
                                        <i class="fas fa-user me-1"></i>Username
                                    </label>
                                    <input type="text" class="form-control" id="username" name="username">
                                    <div class="invalid-feedback"></div>
                                    <div class="form-text">Leave empty to auto-generate</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="password" class="form-label">
                                        <i class="fas fa-lock me-1"></i>Password
                                    </label>
                                    <input type="password" class="form-control" id="password" name="password">
                                    <div class="invalid-feedback"></div>
                                    <div class="form-text">Leave empty to auto-generate</div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="role" class="form-label">
                                        <i class="fas fa-user-tag me-1"></i>Role
                                    </label>
                                    <input type="text" class="form-control" id="role" name="role" value="Staff" readonly>
                                </div>
                            </div>
                        </div>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Note:</strong> If username and password are left empty, they will be automatically generated and sent to the staff member's email address.
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-1"></i>Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" id="submitStaffBtn">
                            <i class="fas fa-user-plus me-1"></i>Add Staff Member
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

<!-- Edit Staff Modal -->
<div class="modal fade" id="editStaffModal" tabindex="-1" aria-labelledby="editStaffModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editStaffModalLabel">
                    <i class="fas fa-user-edit me-2"></i>Edit Staff Member
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editStaffForm">
                <div class="modal-body">
                    <input type="hidden" id="editStaffId" name="staffId">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editFirstName" class="form-label">
                                    <i class="fas fa-user me-1"></i>First Name *
                                </label>
                                <input type="text" class="form-control" id="editFirstName" name="firstName" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editLastName" class="form-label">
                                    <i class="fas fa-user me-1"></i>Last Name *
                                </label>
                                <input type="text" class="form-control" id="editLastName" name="lastName" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editEmail" class="form-label">
                                    <i class="fas fa-envelope me-1"></i>Email Address *
                                </label>
                                <input type="email" class="form-control" id="editEmail" name="email" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editPhoneNumber" class="form-label">
                                    <i class="fas fa-phone me-1"></i>Phone Number *
                                </label>
                                <input type="tel" class="form-control" id="editPhoneNumber" name="phoneNumber" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" id="updateStaffBtn">
                        <i class="fas fa-save me-1"></i>Update Staff Member
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Global functions that need to be accessible from HTML onclick handlers
    function addNewStaff() {
        if (typeof $ === 'undefined') {
            console.error('jQuery not loaded');
            return;
        }
        
        // Reset form
        $('#staffForm')[0].reset();
        $('.form-control').removeClass('is-invalid');
        $('.invalid-feedback').text('');
        
        // Clear username and password fields specifically
        $('#username').val('');
        $('#password').val('');
        
        $('#staffModal').modal('show');
    }
    
    function editStaff(staffId) {
        if (typeof $ === 'undefined') {
            console.error('jQuery not loaded');
            return;
        }
        
        // Fetch staff details and populate the edit form
        $.get('/Admin/GetStaff/' + staffId, function(data) {
            if (data) {
                $('#editStaffId').val(data.staffID);
                $('#editFirstName').val(data.firstName);
                $('#editLastName').val(data.lastName);
                $('#editEmail').val(data.email);
                $('#editPhoneNumber').val(data.phoneNo);
                $('#editStaffModal').modal('show');
            } else {
                showAlert('danger', 'Failed to load staff details.');
            }
        }).fail(function() {
            showAlert('danger', 'Failed to load staff details.');
        });
    }
    
    function deleteStaff(staffId) {
        if (typeof $ === 'undefined') {
            console.error('jQuery not loaded');
            return;
        }
        
        if (confirm('Are you sure you want to delete this staff member? This action cannot be undone.')) {
            $.post('/Admin/DeleteStaff/' + staffId, function(response) {
                if (response.success) {
                    showAlert('success', response.message);
                    // Reload the page to reflect changes
                    setTimeout(function() {
                        location.reload();
                    }, 1500);
                } else {
                    showAlert('danger', response.message || 'Failed to delete staff member.');
                }
            }).fail(function() {
                showAlert('danger', 'Failed to delete staff member.');
            });
        }
    }
    
    function showValidationError(fieldName, message) {
        if (typeof $ === 'undefined') {
            console.error('jQuery not loaded');
            return;
        }
        
        const $field = $('#' + fieldName);
        const $feedback = $field.siblings('.invalid-feedback');
        
        $field.addClass('is-invalid');
        $feedback.text(message);
    }
    
    function isValidEmail(email) {
        const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
        return emailRegex.test(email);
    }
    
    function showAlert(type, message) {
        if (typeof $ === 'undefined') {
            console.error('jQuery not loaded');
            return;
        }
        
        console.log('Showing alert:', type, message);
        
        // Remove existing alerts of the same type
        $('.alert-' + type).remove();
        
        const alertHtml = 
            '<div class="alert alert-' + type + ' alert-dismissible fade show mt-3" role="alert">' +
                '<i class="fas fa-' + (type === 'success' ? 'check-circle' : 'exclamation-triangle') + ' me-2"></i>' +
                message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
            '</div>';
        
        // Add new alert at the top of main content
        $('main').prepend(alertHtml);
        
        // Auto-dismiss success alerts after 5 seconds
        if (type === 'success') {
            setTimeout(function() {
                $('.alert-' + type).fadeOut(function() {
                    $(this).remove();
                });
            }, 5000);
        }
    }

    // Ensure jQuery and DataTable are loaded before executing
    function initializeStaffPage() {
        if (typeof $ === 'undefined') {
            console.log('jQuery not loaded yet, retrying...');
            setTimeout(initializeStaffPage, 100);
            return;
        }
        
        if (typeof $.fn.DataTable === 'undefined') {
            console.log('DataTable not loaded yet, retrying...');
            setTimeout(initializeStaffPage, 100);
            return;
        }
        
        $(document).ready(function() {
            // Initialize DataTable for better table functionality
            if ($('#staffTable').length) {
                try {
                    const table = $('#staffTable').DataTable({
                        "pageLength": 10,
                        "order": [[ 0, "desc" ]],
                        "columnDefs": [
                            { "orderable": false, "targets": [7] }
                        ],
                        "drawCallback": function(settings) {
                            // Hide pagination if there are fewer than 5 rows
                            const info = this.api().page.info();
                            const totalRows = info.recordsTotal;
                            
                            if (totalRows < 5) {
                                $('.dataTables_paginate').hide();
                            } else {
                                $('.dataTables_paginate').show();
                            }
                        }
                    });
                    console.log('DataTable initialized successfully');
                } catch (error) {
                    console.error('Error initializing DataTable:', error);
                }
            }

            // Handle staff form submission
            $('#staffForm').on('submit', function(e) {
                e.preventDefault();
                
                // Clear previous validation
                $('.form-control').removeClass('is-invalid');
                $('.invalid-feedback').text('');
                
                // Get form data
                const formData = {
                    firstName: $('#firstName').val().trim(),
                    lastName: $('#lastName').val().trim(),
                    email: $('#email').val().trim(),
                    phoneNumber: $('#phoneNumber').val().trim(),
                    username: $('#username').val().trim() || '', // Ensure empty string if not provided
                    password: $('#password').val().trim() || '', // Ensure empty string if not provided
                    role: 'Staff'
                };
                
                // Basic validation
                let isValid = true;
                
                if (!formData.firstName || formData.firstName.trim() === '') {
                    showValidationError('firstName', 'First name is required');
                    isValid = false;
                }
                
                if (!formData.lastName || formData.lastName.trim() === '') {
                    showValidationError('lastName', 'Last name is required');
                    isValid = false;
                }
                
                if (!formData.email || formData.email.trim() === '') {
                    showValidationError('email', 'Email address is required');
                    isValid = false;
                } else if (!isValidEmail(formData.email)) {
                    showValidationError('email', 'Please enter a valid email address');
                    isValid = false;
                }
                
                if (!formData.phoneNumber || formData.phoneNumber.trim() === '') {
                    showValidationError('phoneNumber', 'Phone number is required');
                    isValid = false;
                }
                
                if (!isValid) {
                    console.log('Form validation failed, stopping submission');
                    return;
                }
                
                console.log('All validations passed, proceeding with form submission');
                
                // Disable submit button and show loading
                const $submitBtn = $('#submitStaffBtn');
                $submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Adding Staff...');
                
                // Debug logging
                console.log('Submitting staff form with data:', formData);
                console.log('Form validation passed, proceeding with submission...');
                console.log('Username provided:', formData.username ? 'Yes' : 'No');
                console.log('Password provided:', formData.password ? 'Yes' : 'No');
                
                // Submit form
                $.ajax({
                    url: '@Url.Action("AddStaff", "Admin")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function(response) {
                        console.log('Server response:', response);
                        if (response.success) {
                            // Reset form
                            $('#staffForm')[0].reset();
                            $('.form-control').removeClass('is-invalid');
                            $('.invalid-feedback').text('');
                            
                            // Hide modal
                            $('#staffModal').modal('hide');
                            
                            // Show success message
                            showAlert('success', response.message || 'Staff member added successfully! Login credentials have been sent to their email.');
                            
                            // Refresh the staff table without full page reload
                            setTimeout(function() {
                                // Reload the page to show new staff member
                                location.reload();
                            }, 1500);
                        } else {
                            // Handle validation errors
                            if (response.errors) {
                                for (const field in response.errors) {
                                    const fieldName = field.charAt(0).toLowerCase() + field.slice(1);
                                    showValidationError(fieldName, response.errors[field][0]);
                                }
                            } else {
                                showAlert('danger', response.message || 'Failed to add staff member.');
                            }
                        }
                    },
                    error: function(xhr, status, error) {
                        console.log('AJAX Error:', xhr);
                        console.log('Response Text:', xhr.responseText);
                        console.log('Status:', xhr.status);
                        console.log('Error:', error);
                        
                        let errorMessage = 'An error occurred while adding the staff member.';
                        
                        if (xhr.status === 0) {
                            errorMessage = 'Network error. Please check your internet connection and try again.';
                        } else if (xhr.status === 500) {
                            errorMessage = 'Server error. Please try again later.';
                        } else if (xhr.responseJSON && xhr.responseJSON.errors) {
                            // Handle validation errors
                            const errors = xhr.responseJSON.errors;
                            for (const field in errors) {
                                const fieldName = field.charAt(0).toLowerCase() + field.slice(1);
                                showValidationError(fieldName, errors[field][0]);
                            }
                            return; // Don't show general error if we have field-specific errors
                        } else if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        
                        showAlert('danger', errorMessage);
                    },
                    complete: function() {
                        // Re-enable submit button
                        $submitBtn.prop('disabled', false).html('<i class="fas fa-user-plus me-1"></i>Add Staff Member');
                    }
                });
            });

            // Handle edit staff form submission
            $('#editStaffForm').on('submit', function(e) {
                e.preventDefault();
                
                // Clear previous validation
                $('.form-control').removeClass('is-invalid');
                $('.invalid-feedback').text('');
                
                // Get form data
                const formData = {
                    staffId: $('#editStaffId').val(),
                    firstName: $('#editFirstName').val().trim(),
                    lastName: $('#editLastName').val().trim(),
                    email: $('#editEmail').val().trim(),
                    phoneNo: $('#editPhoneNumber').val().trim()
                };
                
                // Basic validation
                let isValid = true;
                
                if (!formData.firstName) {
                    showValidationError('editFirstName', 'First name is required');
                    isValid = false;
                }
                
                if (!formData.lastName) {
                    showValidationError('editLastName', 'Last name is required');
                    isValid = false;
                }
                
                if (!formData.email) {
                    showValidationError('editEmail', 'Email address is required');
                    isValid = false;
                } else if (!isValidEmail(formData.email)) {
                    showValidationError('editEmail', 'Please enter a valid email address');
                    isValid = false;
                }
                
                if (!formData.phoneNo) {
                    showValidationError('editPhoneNumber', 'Phone number is required');
                    isValid = false;
                }
                
                if (!isValid) {
                    return;
                }
                
                // Disable submit button and show loading
                const $submitBtn = $('#updateStaffBtn');
                $submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Updating Staff...');
                
                // Submit form
                $.ajax({
                    url: '@Url.Action("UpdateStaff", "Admin")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function(response) {
                        if (response.success) {
                            $('#editStaffModal').modal('hide');
                            showAlert('success', 'Update Successful!');
                            
                            // Reload page to show updated staff
                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            showAlert('danger', response.message || 'Failed to update staff member.');
                        }
                    },
                    error: function() {
                        showAlert('danger', 'An error occurred while updating the staff member.');
                    },
                    complete: function() {
                        // Re-enable submit button
                        $submitBtn.prop('disabled', false).html('<i class="fas fa-save me-1"></i>Update Staff Member');
                    }
                });
            });

            // Reset form when modal is hidden
            $('#staffModal').on('hidden.bs.modal', function() {
                $('#staffForm')[0].reset();
                $('.form-control').removeClass('is-invalid');
                $('.invalid-feedback').text('');
                
                // Clear username and password fields specifically
                $('#username').val('');
                $('#password').val('');
            });
        });
    }
    
    // Start initialization
    console.log('Staff page script loaded');
    initializeStaffPage();
</script>