@model IEnumerable<CarRentalManagementSystem.DTOs.PaymentResponseDTO>
@{
    ViewData["Title"] = "Payments Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2><i class="fas fa-credit-card me-2"></i>Payments Management</h2>
            <div class="btn-group" role="group">
                <button class="btn btn-outline-secondary" onclick="exportPayments()">
                    <i class="fas fa-download me-1"></i>Export
                </button>
                <button class="btn btn-outline-secondary" onclick="filterPayments()">
                    <i class="fas fa-filter me-1"></i>Filter
                </button>
            </div>
        </div>
        
        @if (Model.Any())
        {
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-center bg-success text-white">
                        <div class="card-body">
                            <h4>$@Model.Where(p => p.PaymentStatus == "Paid").Sum(p => p.AmountPaid).ToString("F2")</h4>
                            <p class="mb-0">Total Revenue</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center bg-primary text-white">
                        <div class="card-body">
                            <h4>@Model.Count(p => p.PaymentStatus == "Paid")</h4>
                            <p class="mb-0">Completed Payments</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center bg-warning text-white">
                        <div class="card-body">
                            <h4>@Model.Count(p => p.PaymentStatus == "Pending")</h4>
                            <p class="mb-0">Pending Payments</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center bg-info text-white">
                        <div class="card-body">
                            <h4>@Model.Count()</h4>
                            <p class="mb-0">Total Transactions</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover align-middle" id="paymentsTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>Payment ID</th>
                                    <th>Booking ID</th>
                                    <th>Customer</th>
                                    <th>Amount</th>
                                    <th>Payment Method</th>
                                    <th>Status</th>
                                    <th>Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var payment in Model.OrderByDescending(p => p.PaymentDate))
                                {
                                    <tr>
                                        <td><strong>#@payment.PaymentID</strong></td>
                                        <td><a href="@Url.Action("Details", "Booking", new { id = payment.BookingID })" class="text-decoration-none">#@payment.BookingID</a></td>
                                        <td>@payment.CustomerName</td>
                                        <td><strong>$@payment.Amount.ToString("F2")</strong></td>
                                        <td>@payment.PaymentMethod</td>
                                        <td>
                                            @if (payment.Status == "Completed")
                                            {
                                                <span class="badge bg-success">@payment.Status</span>
                                            }
                                            else if (payment.Status == "Failed")
                                            {
                                                <span class="badge bg-danger">@payment.Status</span>
                                            }
                                            else if (payment.Status == "Pending")
                                            {
                                                <span class="badge bg-warning">@payment.Status</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">@payment.Status</span>
                                            }
                                        </td>
                                        <td>@payment.PaymentDate.ToString("MMM dd, yyyy hh:mm tt")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-primary" onclick="viewPaymentDetails(@payment.PaymentID)">
                                                    <i class="fas fa-eye"></i> View
                                                </button>
                                                @if (payment.Status == "Completed")
                                                {
                                                    <button class="btn btn-sm btn-outline-secondary" onclick="downloadReceipt(@payment.PaymentID)">
                                                        <i class="fas fa-receipt"></i> Receipt
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-credit-card fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">No payments found</h4>
                <p class="text-muted">No payment transactions to display yet.</p>
            </div>
        }
    </div>
</div>

<!-- Payment Details Modal -->
<div class="modal fade" id="paymentDetailsModal" tabindex="-1" aria-labelledby="paymentDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" id="paymentDetailsContent">
            <!-- Content will be loaded via AJAX -->
        </div>
    </div>
</div>

<!-- Filter Modal -->
<div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filterModalLabel">Filter Payments</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="filterForm">
                    <div class="mb-3">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="">All Statuses</option>
                            <option value="Completed">Completed</option>
                            <option value="Pending">Pending</option>
                            <option value="Failed">Failed</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="dateFrom" class="form-label">Date From</label>
                        <input type="date" class="form-control" id="dateFrom">
                    </div>
                    <div class="mb-3">
                        <label for="dateTo" class="form-label">Date To</label>
                        <input type="date" class="form-control" id="dateTo">
                    </div>
                    <div class="mb-3">
                        <label for="amountMin" class="form-label">Minimum Amount</label>
                        <input type="number" class="form-control" id="amountMin" placeholder="0.00">
                    </div>
                    <div class="mb-3">
                        <label for="amountMax" class="form-label">Maximum Amount</label>
                        <input type="number" class="form-control" id="amountMax" placeholder="0.00">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="applyFilters()">Apply Filters</button>
            </div>
        </div>
    </div>
</div>

<script>
    function viewPaymentDetails(paymentId) {
        $.get('/Payment/PaymentDetails/' + paymentId, function(data) {
            $('#paymentDetailsContent').html(data);
            $('#paymentDetailsModal').modal('show');
        }).fail(function() {
            alert('Error loading payment details.');
        });
    }
    
    function downloadReceipt(paymentId) {
        alert('Download receipt functionality to be implemented for payment: ' + paymentId);
    }
    
    function exportPayments() {
        // Get the table data
        const table = document.getElementById('paymentsTable');
        const rows = table.querySelectorAll('tbody tr');
        
        // Create CSV content
        let csvContent = "Payment ID,Booking ID,Customer,Amount,Payment Method,Status,Date\n";
        
        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            const rowData = [];
            
            cells.forEach((cell, index) => {
                // Skip the actions column (index 7)
                if (index === 7) return;
                
                let text = cell.textContent.trim();
                // Remove special characters and formatting
                text = text.replace(/[#\$\*]/g, '').trim();
                // Add quotes to handle commas in data
                rowData.push(`"${text}"`);
            });
            
            csvContent += rowData.join(',') + '\n';
        });
        
        // Create download link
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.setAttribute('href', url);
        link.setAttribute('download', 'payments_export.csv');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    
    function filterPayments() {
        // Show the filter modal
        const filterModal = new bootstrap.Modal(document.getElementById('filterModal'));
        filterModal.show();
    }
    
    function applyFilters() {
        // Get filter values
        const status = document.getElementById('statusFilter').value;
        const dateFrom = document.getElementById('dateFrom').value;
        const dateTo = document.getElementById('dateTo').value;
        const amountMin = document.getElementById('amountMin').value;
        const amountMax = document.getElementById('amountMax').value;
        
        // Get all table rows
        const table = document.getElementById('paymentsTable');
        const rows = table.querySelectorAll('tbody tr');
        
        // Apply filters
        rows.forEach(row => {
            let showRow = true;
            
            // Status filter
            if (status) {
                const statusCell = row.cells[5]; // Status column
                const statusText = statusCell.textContent.trim();
                if (statusText !== status) {
                    showRow = false;
                }
            }
            
            // Amount filter
            if (showRow && (amountMin || amountMax)) {
                const amountCell = row.cells[3]; // Amount column
                const amountText = amountCell.textContent.replace('$', '').trim();
                const amount = parseFloat(amountText);
                
                if (amountMin && amount < parseFloat(amountMin)) {
                    showRow = false;
                }
                
                if (amountMax && amount > parseFloat(amountMax)) {
                    showRow = false;
                }
            }
            
            // Date filter would require more complex parsing
            
            // Show or hide row
            row.style.display = showRow ? '' : 'none';
        });
        
        // Close the modal
        const filterModal = bootstrap.Modal.getInstance(document.getElementById('filterModal'));
        filterModal.hide();
    }
</script>

@section Scripts {
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
    <script>
        $(document).ready(function() {
            $('#paymentsTable').DataTable({
                "pageLength": 5,
                "order": [[0, "desc"]],
                "columnDefs": [
                    { "orderable": false, "targets": [7] }
                ]
            });
        });
    </script>
}